pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '50'))
  }

  triggers {
    cron '@midnight'
  }

  environment {
    // in the new docker version 23.0 the Buildx and BuildKit are used as the default builder
    // this breakes our docker image creation so we use the parameter below to use the default builder used in docker 20.x
    // https://docs.docker.com/engine/release-notes/23.0/
    DOCKER_BUILDKIT='0'
  }

  stages {
    stage('build') {
      steps {
        script {
          sh 'rm -rf docker-images'
          sh 'git clone https://github.com/oracle/docker-images'
          buildOracleImage()
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}

def buildOracleImage() {
  def tag = "23.5.0-free"

  def baseImageName = "oracle/database:${tag}"
  def baseImage
  dir ('docker-images/OracleDatabase/SingleInstance/dockerfiles') {
    // -v = Version, -f = FREE edition
    sh "./buildContainerImage.sh -v 23.5.0 -f"

    baseImage = docker.image(baseImageName)
    docker.withRegistry('https://docker-registry.ivyteam.io', 'docker-registry.ivyteam.io') {
      if (env.BRANCH_NAME == 'master') {
        baseImage.push()
      }
    }
  }

  def imageName = "oracle/database-orapdb:${tag}"
  baseImage.withRun('-e "ORACLE_SID=FREE" -e "ORACLE_PDB=ORAPDB" -e "ORACLE_CHARACTERSET=AL32UTF8" -e "ORACLE_PWD=nimda"') { container -> 
    waitUntilDbIsReady(container)
    sh "docker cp oracle-23.5.0/listener.ora ${container.id}:/opt/oracle/product/23ai/dbhomeFree/network/admin/listener.ora"
    sh "docker commit ${container.id} ${imageName}"
  }

  def dbImage = docker.image(imageName)
  docker.withRegistry('https://docker-registry.ivyteam.io', 'docker-registry.ivyteam.io') {
    if (env.BRANCH_NAME == 'master') {
      dbImage.push()
    }
  }

  sh "docker image rm ${baseImageName}"
  sh "docker image rm ${imageName}"
  sh "docker volume prune -f"
}

def waitUntilDbIsReady(container) {
  def attempts = 0;
  while (attempts < 180) {
    if (isDbReady(container)) {
      return
    }
    attempts++
    sleep 10
  }
  error("Database initialization timeouted after 30 minutes")
}

def isDbReady(container) {
  sh "docker logs ${container.id}";
  return sh (script: "docker logs ${container.id} | grep 'DATABASE IS READY TO USE!'", returnStatus: true) == 0
}
